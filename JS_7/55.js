/** ЗАДАЧА 55 - Разница в объявлении функций
 *
 * 1. Объясните разницу между двумя вариантами объявления функций
 *
 * 2. Покажите эту разницу, добавив дополнительный код под функциями
 *
 * 3. Также вызовите обе функции
 */


console.log(firstFunction(1, 2)) // 3

/*
Это Function Declaration - классическое объявление функции.
Ключевое слово function интерпретатор создаёт функцию и затем присваивает ссылку на неё переменной с именем firstFunction (переменная с данным именем создаётся интерпретатором автоматически).
Обратившись к переменной firstFunction можно увидеть, что в качестве значения там находится функция (на самом деле ссылка на неё)
*/
function firstFunction(a, b) {
  return a + b
}

/*
Это Named Function Expression – объявление функции, которое является частью какого-либо выражения (например присваивания).
Как и в Function Declaration, интерпретатор создаёт функцию и сохраняет ссылку на неё в переменной secondFunction.
Программный код, расположенный в теле функции, выполняется не в момент объявления функции, а в момент её вызова.
*/
{
  const secondFunction = function (a, b) { // Фунцкия существует только в пределах блока
    return a + b
  }
  console.log(secondFunction(2, 3)) // 5
}

console.log(secondFunction(3, 4)) // ReferenceError: Cannot access 'secondFunction' before initialization

const secondFunction = function (a, b) {
  return a + b
}

console.log(secondFunction(3, 4)) // 7


/*
Разница между представленнымиобъявлениями заключается в том, что функции, объявленные как Function Declaration, создаются интерпретатором до начала выполнения кода (на этапе анализа), 
поэтому их можно вызывать (в той области видимости где они объявлены) до объявления.
Функции, (Function Declaration и Named Function Expression) объявленные внутри блока, находятся в блочной области видимости.
Функции, объявленные как Named Function Expression, создаются в процессе выполнения кода, поэтому их можно вызывать только после того как они объявлены.
Функция, объявленная как Named Function Expression, имеет возможность обращаться к себе по имени при рекурсивном вызове. Имя функции доступно только внутри самой функции.
*/

